/* tslint:disable */
/* eslint-disable */
/**
 * Tapir By LingXi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import * as base from './base';

/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    oldPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    newPassword: string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    nickName: string;
}
/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * 
     * @type {number}
     * @memberof ErrorMessage
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    message: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface PageDtoUserDto
 */
export interface PageDtoUserDto {
    /**
     * 
     * @type {number}
     * @memberof PageDtoUserDto
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PageDtoUserDto
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof PageDtoUserDto
     */
    totalCount: number;
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof PageDtoUserDto
     */
    data?: Array<UserDto>;
    /**
     * 
     * @type {number}
     * @memberof PageDtoUserDto
     */
    totalPages: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageDtoUserDto
     */
    hasPrevious: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageDtoUserDto
     */
    hasNext: boolean;
}
/**
 * 
 * @export
 * @interface PermissionDto
 */
export interface PermissionDto {
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    value: string;
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    createBy: number;
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    updateBy: number;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    updateAt: string;
}
/**
 * 
 * @export
 * @interface RoleDto
 */
export interface RoleDto {
    /**
     * 
     * @type {number}
     * @memberof RoleDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RoleDto
     */
    createBy: number;
    /**
     * 
     * @type {number}
     * @memberof RoleDto
     */
    updateBy: number;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    updateAt: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    nickName: string;
    /**
     * 
     * @type {RoleDto}
     * @memberof UserDto
     */
    role?: RoleDto;
    /**
     * 
     * @type {Array<PermissionDto>}
     * @memberof UserDto
     */
    permissions?: Array<PermissionDto>;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    createBy: number;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    updateBy: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    createAt: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    updateAt: string;
}

/**
 * FileAPIApi - axios parameter creator
 * @export
 */
export const FileAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 上传文件接口
         * @summary 上传文件
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUpload: async (file: any, options: any = {}): Promise<base.RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new base.RequiredError('file','Required parameter file was null or undefined when calling fileUpload.');
            }
            const localVarPath = `/files/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileAPIApi - functional programming interface
 * @export
 */
export const FileAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 上传文件接口
         * @summary 上传文件
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUpload(file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await FileAPIApiAxiosParamCreator(configuration).fileUpload(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = base.BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FileAPIApi - factory interface
 * @export
 */
export const FileAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 上传文件接口
         * @summary 上传文件
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUpload(file: any, options?: any): AxiosPromise<string> {
            return FileAPIApiFp(configuration).fileUpload(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileAPIApi - object-oriented interface
 * @export
 * @class FileAPIApi
 * @extends {base.BaseAPI}
 */
export class FileAPIApi extends base.BaseAPI {
    /**
     * 上传文件接口
     * @summary 上传文件
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileAPIApi
     */
    public fileUpload(file: any, options?: any) {
        return FileAPIApiFp(this.configuration).fileUpload(file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersAPIApi - axios parameter creator
 * @export
 */
export const UsersAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 当前登陆用户修改密码
         * @summary 修改密码
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPwd: async (changePasswordRequest: ChangePasswordRequest, options: any = {}): Promise<base.RequestArgs> => {
            // verify required parameter 'changePasswordRequest' is not null or undefined
            if (changePasswordRequest === null || changePasswordRequest === undefined) {
                throw new base.RequiredError('changePasswordRequest','Required parameter changePasswordRequest was null or undefined when calling changeUserPwd.');
            }
            const localVarPath = `/users/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof changePasswordRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(changePasswordRequest !== undefined ? changePasswordRequest : {})
                : (changePasswordRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建用户
         * @summary 创建用户
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserRequest: CreateUserRequest, options: any = {}): Promise<base.RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            if (createUserRequest === null || createUserRequest === undefined) {
                throw new base.RequiredError('createUserRequest','Required parameter createUserRequest was null or undefined when calling createUser.');
            }
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createUserRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(createUserRequest !== undefined ? createUserRequest : {})
                : (createUserRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前用户信息，包括基本信息/权限/角色等，但是不包括密码
         * @summary 当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser: async (options: any = {}): Promise<base.RequestArgs> => {
            const localVarPath = `/users/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据id 删除用户
         * @summary 删除用户
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: any = {}): Promise<base.RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base.RequiredError('id','Required parameter id was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 分页的方式获取用户列表，支持排序
         * @summary 分页获取用户
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPage: async (page?: number, size?: number, sort?: string, options: any = {}): Promise<base.RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 输入用户名和密码，登陆管理后台
         * @summary 用户登陆
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: any = {}): Promise<base.RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            if (loginRequest === null || loginRequest === undefined) {
                throw new base.RequiredError('loginRequest','Required parameter loginRequest was null or undefined when calling login.');
            }
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof loginRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(loginRequest !== undefined ? loginRequest : {})
                : (loginRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersAPIApi - functional programming interface
 * @export
 */
export const UsersAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 当前登陆用户修改密码
         * @summary 修改密码
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeUserPwd(changePasswordRequest: ChangePasswordRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersAPIApiAxiosParamCreator(configuration).changeUserPwd(changePasswordRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = base.BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 创建用户
         * @summary 创建用户
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserRequest: CreateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await UsersAPIApiAxiosParamCreator(configuration).createUser(createUserRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = base.BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取当前用户信息，包括基本信息/权限/角色等，但是不包括密码
         * @summary 当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await UsersAPIApiAxiosParamCreator(configuration).currentUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = base.BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 根据id 删除用户
         * @summary 删除用户
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await UsersAPIApiAxiosParamCreator(configuration).deleteUser(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = base.BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 分页的方式获取用户列表，支持排序
         * @summary 分页获取用户
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByPage(page?: number, size?: number, sort?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDtoUserDto>> {
            const localVarAxiosArgs = await UsersAPIApiAxiosParamCreator(configuration).listByPage(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = base.BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 输入用户名和密码，登陆管理后台
         * @summary 用户登陆
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UsersAPIApiAxiosParamCreator(configuration).login(loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = base.BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersAPIApi - factory interface
 * @export
 */
export const UsersAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 当前登陆用户修改密码
         * @summary 修改密码
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUserPwd(changePasswordRequest: ChangePasswordRequest, options?: any): AxiosPromise<void> {
            return UsersAPIApiFp(configuration).changeUserPwd(changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建用户
         * @summary 创建用户
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserRequest: CreateUserRequest, options?: any): AxiosPromise<number> {
            return UsersAPIApiFp(configuration).createUser(createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前用户信息，包括基本信息/权限/角色等，但是不包括密码
         * @summary 当前用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser(options?: any): AxiosPromise<UserDto> {
            return UsersAPIApiFp(configuration).currentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 根据id 删除用户
         * @summary 删除用户
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: any): AxiosPromise<string> {
            return UsersAPIApiFp(configuration).deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 分页的方式获取用户列表，支持排序
         * @summary 分页获取用户
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPage(page?: number, size?: number, sort?: string, options?: any): AxiosPromise<PageDtoUserDto> {
            return UsersAPIApiFp(configuration).listByPage(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 输入用户名和密码，登陆管理后台
         * @summary 用户登陆
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<void> {
            return UsersAPIApiFp(configuration).login(loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersAPIApi - object-oriented interface
 * @export
 * @class UsersAPIApi
 * @extends {base.BaseAPI}
 */
export class UsersAPIApi extends base.BaseAPI {
    /**
     * 当前登陆用户修改密码
     * @summary 修改密码
     * @param {ChangePasswordRequest} changePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAPIApi
     */
    public changeUserPwd(changePasswordRequest: ChangePasswordRequest, options?: any) {
        return UsersAPIApiFp(this.configuration).changeUserPwd(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建用户
     * @summary 创建用户
     * @param {CreateUserRequest} createUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAPIApi
     */
    public createUser(createUserRequest: CreateUserRequest, options?: any) {
        return UsersAPIApiFp(this.configuration).createUser(createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前用户信息，包括基本信息/权限/角色等，但是不包括密码
     * @summary 当前用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAPIApi
     */
    public currentUser(options?: any) {
        return UsersAPIApiFp(this.configuration).currentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据id 删除用户
     * @summary 删除用户
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAPIApi
     */
    public deleteUser(id: number, options?: any) {
        return UsersAPIApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 分页的方式获取用户列表，支持排序
     * @summary 分页获取用户
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAPIApi
     */
    public listByPage(page?: number, size?: number, sort?: string, options?: any) {
        return UsersAPIApiFp(this.configuration).listByPage(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 输入用户名和密码，登陆管理后台
     * @summary 用户登陆
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersAPIApi
     */
    public login(loginRequest: LoginRequest, options?: any) {
        return UsersAPIApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


